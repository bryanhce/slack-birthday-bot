service: slack-birthday-bot
frameworkVersion: '3'
useDotenv: true

provider:
  name: aws
  runtime: nodejs20.x
  region: ap-southeast-1
  environment:
    SLACK_BOT_TOKEN: ${env:SLACK_BOT_TOKEN}
    # SLACK_SIGNING_SECRET: ${env:SLACK_SIGNING_SECRET} TODO check if i need this to increase security
    DYNAMODB_TABLE: ${self:custom.dynamodb_table}
  iam:
    role:
      statements:
      - Effect: Allow
        Action:
          - 'dynamodb:GetItem'
          - 'dynamodb:BatchGetItem'
          - 'dynamodb:Scan'
          - 'dynamodb:Query'
          - 'dynamodb:PutItem'
          - 'dynamodb:UpdateItem'
          - 'dynamodb:DeleteItem'
          - 'dynamodb:BatchWriteItem'
        Resource:
          # Fn::GetAtt is CloudFormation intrinsic function to get ARN of table
          # this yaml syntax [BirthdaysTable, Arn] is same as
          # - BirthdaysTable
          # - Arn
          - 'Fn::GetAtt': [BirthdaysTable, Arn]
          # Fn::Join is another CloudFormation function that concatenates strings
          - 'Fn::Join': ['', ['Fn::GetAtt': [BirthdaysTable, Arn], '/index/*']]

functions:
  slackCommand:
    # if want to use src/slackCommand.handler, need to use named exports in file
    handler: src/slackCommand.default
    memorySize: 128 # in MB
    ephemeralStorageSize: 512 # in MB
    timeout: 5 # in seconds
    events:
      - http:
          path: slack
          method: post
  dailyReminder:
    handler: src/dailyReminder.default
    memorySize: 128
    ephemeralStorageSize: 512
    timeout: 5
    events:
      # every day 8am SGT
      - schedule: cron(0 0 * * ? *)
  monthlyReminder:
    handler: src/monthlyReminder.default
    memorySize: 128
    ephemeralStorageSize: 512
    timeout: 5
    events:
      # every 1st of the month 7.59am in SGT
      - schedule: cron(59 23 31 * ? *)

plugins:
  - serverless-esbuild

custom:
  esbuild:
    bundle: true
    minify: false
    sourcemap: true
    exclude: ['aws-sdk']
    target: 'node20'
    platform: 'node'
  dynamodb_table: 'birthdays' # declaring a custom variable

resources:
  Resources:
    BirthdaysTable:
      Type: AWS::DynamoDB::Table
      # keeps table data instead of destroying on new deploy
      # but also doesn't delete the table when u remove this resource
      # from this serverless file
      DeletionPolicy: Retain 
      Properties:
        TableName: ${self:custom.dynamodb_table}
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: name
            AttributeType: S
          - AttributeName: month
            AttributeType: S
          - AttributeName: day
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: name
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: MonthDayIndex
            KeySchema:
              - AttributeName: month
                KeyType: HASH
              - AttributeName: day
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
